package checkers;

import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/*
 * BoardGUI.java
 *
 * Created on Nov 18, 2013, 5:23:36 PM
 */
/**
 *
 * @author mcginl04
 */
public class BoardGUI extends javax.swing.JFrame implements GUI{
    private static final String root = "C:\\Users\\Joe\\Documents\\NetBeansProjects\\checkers\\src\\checkers\\";
    private static final ImageIcon EMPTY = new ImageIcon(root +"empty.gif");
    private static final ImageIcon EMPTY_HIGHLIGHT = new ImageIcon(root +"emptyLighted.gif");
    private static final ImageIcon BLACK = new ImageIcon(root +"black.gif");
    private static final ImageIcon BLACK_HIGHLIGHT = new ImageIcon(root +"blackLighted.gif");
    private static final ImageIcon RED = new ImageIcon(root +"red.gif");
    private static final ImageIcon RED_HIGHLIGHT = new ImageIcon(root +"redLighted.gif");
    private static final ImageIcon BLACK_KING = new ImageIcon(root +"blackKing.gif");
    private static final ImageIcon BLACK_KING_HIGHLIGHT = new ImageIcon(root +"blackKingLighted.gif");
    private static final ImageIcon RED_KING = new ImageIcon(root +"redKing.gif");
    private static final ImageIcon RED_KING_HIGHLIGHT = new ImageIcon(root +"redKingLighted.gif");
    
    private Board b; //update board after move
    private boolean pieceSelected = false;

    /** Creates new form BoardGUI */
    public BoardGUI() {
        initComponents();
        b = new Board();
        display(b);
        setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        logField = new javax.swing.JTextField();
        boardPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveItem = new javax.swing.JMenuItem();
        loadItem = new javax.swing.JMenuItem();
        closeItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Checkers");

        boardPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onClicked(evt);
            }
        });
        boardPanel.setLayout(new java.awt.GridLayout(8, 8));

        fileMenu.setText("File");

        saveItem.setText("Save");
        fileMenu.add(saveItem);

        loadItem.setText("Load");
        fileMenu.add(loadItem);

        closeItem.setText("Close");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeItem);

        menuBar.add(fileMenu);

        viewMenu.setText("View");
        menuBar.add(viewMenu);

        helpMenu.setText("Help");
        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(logField, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logField, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
            .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {                                          
        System.exit(0);
    }                                         

    public void display(Board b) {
        this.b = b;
        boardPanel.removeAll();
        
        for(int row=0; row<8; row++) {
            for(int col=0; col<8; col++) {
                Piece p = b.getPiece(row, col);
                
                if(p.getColor() == 'B') {
                    if(p.isKing())
                        boardPanel.add(new JLabel(BLACK_KING));
                    else
                        boardPanel.add(new JLabel(BLACK));
                }
                else if(p.getColor() == 'R') {
                    if(p.isKing())
                        boardPanel.add(new JLabel(RED_KING));
                    else
                        boardPanel.add(new JLabel(RED));
                }
                else
                    boardPanel.add(new JLabel(EMPTY));
            }
        }
        repaint();
    }
    private void onClicked(java.awt.event.MouseEvent evt) {                           
        int row = (evt.getY()/BLACK.getIconHeight());
        int col = (evt.getX()/BLACK.getIconWidth());
        if(row > 7)
            row = 7;
        if(col > 7)
            col = 7;
        System.out.println(row + " " + col);
        Piece p = b.getPiece(row,col);
        if(pieceSelected == false)
            selectPiece(p);
        else
            selectMove(p);
        display(b);
    }                          

    private void selectPiece(Piece p) {
        if(p.getColor() != 'r')
            return;
        pieceSelected = true;
    }
    
    private void selectMove(Piece p) {
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new BoardGUI();
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JPanel boardPanel;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem loadItem;
    private javax.swing.JTextField logField;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration                   

    @Override
    public void display(Board b, ArrayList<Piece> moves, char display) {
        this.b = b;
        boardPanel.removeAll();
        
        for(int row=0; row<8; row++) {
            for (int col = 0; col < 8; col++) {
                Piece p = b.getPiece(row, col);
                boolean found = false;
                for (Piece move : moves) {
                    int[] pos = move.getPosition();
                    if (row == pos[0] && col == pos[1]) {
                        found = true;
                        if (display == '+') {
                            boardPanel.add(new JLabel(EMPTY_HIGHLIGHT));
                        } else if (display == '*') {
                            switch (p.getColor()) {
                                case 'R':
                                    if (p.isKing()) {
                                        boardPanel.add(new JLabel(RED_KING_HIGHLIGHT));
                                    } else {
                                        boardPanel.add(new JLabel(RED_HIGHLIGHT));
                                    }
                                    break;
                                case 'B':
                                    if (p.isKing()) {
                                        boardPanel.add(new JLabel(BLACK_KING_HIGHLIGHT));
                                    } else {
                                        boardPanel.add(new JLabel(BLACK_HIGHLIGHT));
                                    }
                                    break;
                            }
                        }

                    }
                }
                if(found == false) {
                    switch (p.getColor()) {
                        case 'R':
                            if (p.isKing()) {
                                boardPanel.add(new JLabel(RED_KING));
                            } else {
                                boardPanel.add(new JLabel(RED));
                            }
                            break;
                        case 'B':
                            if (p.isKing()) {
                                boardPanel.add(new JLabel(BLACK_KING));
                            } else {
                                boardPanel.add(new JLabel(BLACK));
                            }
                            break;
                        case '-':
                            boardPanel.add(new JLabel(EMPTY));
                    }
                }
            }
        }
        pack();
    }

    @Override
    public Piece getMove(Board b, char piece) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    public Piece getMove(Board b, char piece, int[] pos) throws Exception {
        this.b = b;
        
        if (b.getPiece(pos[0], pos[1]).getColor() != piece) {
            System.out.println("This is not a valid choice.");
        } else {
            //valid = true;
        }
        return b.getPiece(pos[0], pos[1]);
    }

    @Override
    public Piece getMove(Board b, ArrayList<Piece> moves, char piece) throws IOException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void help() {
        System.out.println("I hate you");
    }
}
