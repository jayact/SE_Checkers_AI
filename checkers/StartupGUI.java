package checkers;
import Algorithms.*;
/*
<<<<<<< HEAD
* GUI.java
*
* Created on Nov 18, 2013, 4:30:28 PM
*/
/**
*This is the start up screen, the piece that the user interacts
*with to set the players and begin the match.
* @author mcginl04
*/
=======
 * GUI.java
 *
 * Created on Nov 18, 2013, 4:30:28 PM
 */
/**
 *
 * @author mcginl04
 */
>>>>>>> 157926b7e6f8d9db2f8ff3c3a03a049ff072ac84
public class StartupGUI extends javax.swing.JFrame {

    private static boolean finishSelection = false;
    private static Player p1;
    private static Player p2;
    
<<<<<<< HEAD
    /**
     * A hackish method, just returns the players once the
     * players are set and confirmed
     * @return
     */
    public Player[] getPlayers()
    {
            while(finishSelection == false)
            {
                     try {
=======
    /*
     * returns the players chosen by the user to play the game
     * @return Player[], two players for the game
     */
    public Player[] getPlayers()
    {
    	while(finishSelection == false)
    	{
    		 try {
>>>>>>> 157926b7e6f8d9db2f8ff3c3a03a049ff072ac84
                 //do what you want to do before sleeping
                 Thread.currentThread().sleep(1000);//sleep for 1000 ms
                 //do what you want to do after sleeptig
             } catch (InterruptedException ie) {
                 //If this thread was intrrupted by nother thread
             }
<<<<<<< HEAD
            }
            return new Player[]{p1, p2};
=======
    	}
    	return new Player[]{p1, p2};
>>>>>>> 157926b7e6f8d9db2f8ff3c3a03a049ff072ac84
    }
    
    /** Creates new form GUI */
    public StartupGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
* initialize the form.
* WARNING: Do NOT modify this code. The content of this method is
* always regenerated by the Form Editor.
*/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        matchStartup = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        firstPlayer = new javax.swing.JComboBox();
        secondPlayer = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Checkers Setup");

        matchStartup.setText("Begin Match!");
        matchStartup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchStartupActionPerformed(evt);
            }
        });

        titleLabel.setText("Checkers Setup");

        firstPlayer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Human Player", "Minimax (AI)", "Minimax with alphabeta (AI)", "Negamax (AI)", "Negascout (AI)", "A* (AI)", "Expectiminimax (AI)" }));

        secondPlayer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Human Player", "Minimax (AI)", "Minimax with alphabeta (AI)", "Negamax (AI)", "Negascout (AI)", "A* (AI)", "Expectiminimax (AI)" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(firstPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(matchStartup, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(secondPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(373, Short.MAX_VALUE)
                .addComponent(titleLabel)
                .addGap(341, 341, 341))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(matchStartup))
                .addContainerGap(151, Short.MAX_VALUE))
        );

        pack();
<<<<<<< HEAD
    }// </editor-fold>

    private void matchStartupActionPerformed(java.awt.event.ActionEvent evt) {
=======
    }// </editor-fold>                        

    /*
     * Button to start the BoardGUI with the chosen players
     */
    private void matchStartupActionPerformed(java.awt.event.ActionEvent evt) {                                             
>>>>>>> 157926b7e6f8d9db2f8ff3c3a03a049ff072ac84
        String p1_str = (String) firstPlayer.getSelectedItem();
        String p2_str = (String) secondPlayer.getSelectedItem();
        setVisible(false);
        p1 = determinePlayer(p1_str, 'B');
        p2 = determinePlayer(p2_str, 'R');
        finishSelection = true;
<<<<<<< HEAD
    }
    
    /**
     * converts a string selection to an actual player.
     * @param player is the string in question
     * @param color the color that is assigned to it
     * @return a player
     */
    private Player determinePlayer(String player, char color) {
        Player p;
        switch(player) {
            case "Human Player": p = new User(color);
                break;
            case "Minimax (AI)": p = new AI(color, new MiniMax());
                break;
            case "Minimax with alphabeta (AI)": p = new AI(color, new MiniMaxAlphaBeta());
                break;
            case "Negascout (AI)": p = new AI(color, new NegaScout());
=======
    }                                            

    /*
     * helper method to switch the string returned by the button to a Player
     * @param player, the string representation of the player chosen
     * @param piece, the piece this player will play as, either 'B' or 'R'
     * @return Player, the player determined from the string
     */
    private Player determinePlayer(String player, char piece) {
        Player p;
        switch(player) {
            case "Human Player": p = new User(piece);
                break;
            case "Minimax (AI)": p = new AI(piece, new MiniMax());
                break;
            case "Minimax with alphabeta (AI)": p = new AI(piece, new MiniMaxAlphaBeta());
                break;
            case "Negascout (AI)": p = new AI(piece, new NegaScout());
>>>>>>> 157926b7e6f8d9db2f8ff3c3a03a049ff072ac84
                break;
            //case "Negamax (AI)": p = new AI(piece, new NegaMax());
            //case "A* (AI)": p = new AI(piece, new A());
            //case "Expectiminimax (AI)": new AI(piece, new ExpectiMiniMax());
<<<<<<< HEAD
            default: p = new User(color);
=======
            default: p = new User(piece);
>>>>>>> 157926b7e6f8d9db2f8ff3c3a03a049ff072ac84
                break;
        }
        return p;
    }
    /**
<<<<<<< HEAD
* @param args the command line arguments
*/
=======
     * @param args the command line arguments
     */
>>>>>>> 157926b7e6f8d9db2f8ff3c3a03a049ff072ac84
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new StartupGUI().setVisible(true);
            }
        });
    }
<<<<<<< HEAD
    // Variables declaration - do not modify
=======
    // Variables declaration - do not modify                     
>>>>>>> 157926b7e6f8d9db2f8ff3c3a03a049ff072ac84
    private javax.swing.JComboBox firstPlayer;
    private javax.swing.JButton matchStartup;
    private javax.swing.JComboBox secondPlayer;
    private javax.swing.JLabel titleLabel;
<<<<<<< HEAD
    // End of variables declaration
}
=======
    // End of variables declaration                   
}
>>>>>>> 157926b7e6f8d9db2f8ff3c3a03a049ff072ac84
